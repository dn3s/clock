#!/usr/bin/perl
use strict;
use warnings;
use File::Spec;
use Text::Wrap;
use POSIX;
use Time::Piece;
use Data::Dumper;
use Math::Round;
use Term::ANSIColor;
(my $command, my $job, my $n)=@ARGV;
my $dir=File::Spec->catdir($ENV{"HOME"}, ".hours");
my $css="test.css";
my $currentfile=File::Spec->catdir($dir, ".current");
$command=$command || "";

if($command=~/^(in)$/) {
	start($job);
}
elsif($command=~/^(out)$/) {
	stop($job || current());
}
elsif($command=~/^(show)$/) {
	report($job || current(), $n);
}
elsif($command=~/^(html)$/) {
	html($job || current(), $n);
}
elsif($command=~/^(ls)$/) {
	ls();
}
elsif($command=~/^(total)$/) {
	addTotalRow($job || current(), $n);
}
elsif($command=~/^(-*help|-?h)$/) {
	print(wrap("","",<<END));
$0:
Keep track of your projects.

Usage:
$0 <command>

Commands:

in:
Type "$0 in", followed by the name of the project you want to track. If the job file doesn't exist, it will be created.

out:
Type "$0 out" to mark when you're done working on a project for the day. You will be prompted for a comment.

ls:
Type "$0 ls" to see a list of projects you are tracking

total:
Type "$0 total", optionally followed by a number, to add a subtotal row to your report. This is useful for breaking up work on a project into multiple invoices.
If followed by a number, your hourly rate of pay for this subtotal block will be set to the number. Any subsequent subtotal rows will default to this rate of pay until a different one is specified.

show:
Type "$0 show", followed by the name of a project, and it will show a complete history of work. You may want to pipe this into less if you have a large history.

status:
Type "$0 status" (or just "$0"; it's default) to see how long you've been working on your current project. If you're not clocked in on any project, it will print a list of projects.

The data is stored in the ~/.hours directory, in a simple, human-readable and human-editable plain text format.
END
}
else {
	my $j=$job || current();
	$j?status($j):ls();
}

sub start
{
	(my $job)=@_;
	if(my $status=jobstatus($job)) {
		my $duration=friendlyDuration($status);
		print("You are already working on $job! (and have been for $duration)\n");
		exit 1;
	}
	my $current=current();
	if($current) {
		print("I guess you are done with $current then...\n");
		stop($current);
	}
	open(my $fh, ">>", jobfile($job)) or die("Cannot open file for writing\n");
	print $fh time();
	close($fh);
	current($job);
	print("You are now working on $job\n");
}

sub stop
{
	(my $job)=@_;
	if($job and -e jobfile($job) and my $status=jobstatus($job)) {
		print("You are done working on $job. What have you been doing for the last ".friendlyDuration($status)."?\n> ");
		my $note=<STDIN>;
		chomp($note);
		open(my $fh, ">>", jobfile($job)) or die("Cannot open file for writing\n");
		print $fh " $status $note\n";
		close($fh);
		current("");
	}
	else {
		print("You aren't working on anything!\n");
	}
}
sub addTotalRow
{
	(my $job, my $rate)=@_;
	my $current=current();
	if($current eq $job) {
		stop(current())
	}
	my $rateString="";
	if($rate) {
		$rateString=sprintf("%.2f", nearest(0.01, $rate));
	}
	print("Please enter a comment: ");
	my $comment=<STDIN>;
	chomp($comment);
	open(my $fh, ">>", jobfile($job)) or die("Cannot open file for writing\n");
	print $fh "\t$rateString $comment\n";
	close($fh);
}

sub ls
{
	mkdir($dir) if( ! -d $dir );
	opendir(my $d, $dir) or die();
	my @files=sort(grep(!/^\./, readdir($d)));
	print(color("bold underline")."Projects:\n".color("reset"));
	my $maxlen=0;
	for my $file (@files) {
		my $l=length($file);
		$maxlen=$l if($l>$maxlen);
	}
	for my $file (@files) {
		my $total=duration(total($file));
		print(sprintf("%-${maxlen}s %s\n", $file, $total));
	}
}

sub total
{
	(my $job)=@_;
	my $jobfile=jobfile($job);
	my $total=0;
	if(-e $jobfile and my @lines=split(/\n/, `/usr/bin/tail $jobfile`)) {
		foreach my $line (@lines) {
			if((my $timestamp, my $duration, my $comment)=$line=~/^(\d+)\s+(\d+)\s+(.*)$/) {
				$total+=$duration;
			}
			elsif(($timestamp)=$line=~/^(\d+)$/) {
				my $duration=time()-$timestamp;
				$total+=$duration;
			}
		}
	}
	return $total;
}

sub report
{
	(my $job, my $rate=0)=@_;
	my $jobfile=jobfile($job);
	my $total=0;
	my $gtotal=0;
	my $totalMoney=0;
	my $enclosed=1;
	print("Work history for $job:\n");
	if(-e $jobfile and my @lines=split(/\n/, `/usr/bin/cat $jobfile`)) {
		print("╭───────────────┬────────┬────────┬────────╮\n");
		print("│Date           │Time    │Duration│Comments│\n"); 
		print("├───────────────┼────────┼────────┼────────╯\n");
		foreach my $line (@lines) {
			if($enclosed==0) {
				print("├───────────────┬────────┬────────╮\n");
				$enclosed=1;
			}
			if((my $timestamp, my $duration, my $comment)=$line=~/^(\d+)\s+(\d+)\s*(.*)$/) { #a normal, closed row
				$total+=$duration;
				$gtotal+=$duration;
				my $time=localtime($timestamp)->strftime("%T");
				my $date=localtime($timestamp)->strftime("%a %b %e %Y");
				$duration=duration($duration);
				print("│$date│$time│$duration│$comment\n"); 
			}
			elsif((my $r, my $subtotalComment)=$line=~/^$|^\s+(\d+(?:\.\d+)?)?\s*(.*)$/) { #a subtotal/invoice type thing
				print("├───────────────┴────────┴────────╯\n");
				$enclosed=0;
				$rate=$r if($r);
				print("│ " . color("bold") . "$subtotalComment:" . color("reset") . "\n") if($subtotalComment);
				print("│ ");
				$totalMoney+=subtotal($total, $rate);
				$total=0;
			}
			elsif(($timestamp)=$line=~/^(\d+)$/) { #an entry that has not yet been closed (still onging)
				my $duration=time()-$timestamp;
				$total+=$duration;
				my $time=localtime($timestamp)->strftime("%T");
				my $date=localtime($timestamp)->strftime("%a %b %e %Y");
				$duration=duration($duration);
				print(color("italic")."│$date│$time│$duration│ongoing\n".color("reset")); 
				
			}
		}
		if($enclosed==1) {
			print("├───────────────┴────────┴────────╯\n");
			print("│ ");
			print(color("italic"));
			$totalMoney+=subtotal($total, $rate) if($total);
			print(color("reset"));
		}
		print(color("bold"));
		print("\nTotal: ");
		print(friendlyDuration($gtotal));
		printf(' ($%.2f)', $totalMoney) if($totalMoney);
		print(color("reset")."\n");
	}
}
sub subtotal
{
	(my $total, my $rate)=@_;
	print(friendlyDuration($total));
	my $money=0;
	if($rate) {
		$rate=nearest(0.01, $rate); #for the sake of honesty, gotta round it for the maths if we're going to display it rounded
		$money=nearest(0.01, $total/3600*$rate);
		printf(' ($%.2f, $%.2f/h)', $money, $rate);
	}
	print("\n");
	return $money;
}

sub html
{
	(my $job)=@_;
	my $jobfile=jobfile($job);
	my $total=0;
	if(-e $jobfile and my @lines=split(/\n/, `/usr/bin/tail $jobfile`)) {
		print("<link rel=\"stylesheet\" href=\"$css\">");
		print("<h1>Invoice for $job</h1>");
		print("<table><thead><tr><th>Date</th><th>Time</th><th>Duration</th><th>Comments</th></tr></thead><tbody>"); 
		foreach my $line (@lines) {
			if((my $timestamp, my $duration, my $comment)=$line=~/^(\d+)\s+(\d+)\s+(.*)$/) {
				$total+=$duration;
				my $time=localtime($timestamp)->strftime("%T");
				my $date=localtime($timestamp)->strftime("%a %b %e %Y");
				$duration=duration($duration);
				print("<tr><td>$date</td><td>$time</td><td>$duration</td><td>$comment</td></tr>"); 
			}
			elsif(($timestamp)=$line=~/^(\d+)$/) {
				my $duration=time()-$timestamp;
				$total+=$duration;
				my $time=localtime($timestamp)->strftime("%T");
				my $date=localtime($timestamp)->strftime("%a %b %e %Y");
				$duration=duration($duration);
				print("<tr class=\"ongoing\"><td>$date</td><td>$time</td><td>$duration</td><td></td></tr>"); 
				
			}
		}
		print("");
		print("</tbody></table><div id=\"total_hours\">".friendlyDuration($total)."</div>");
		print("<div id=\"rate\">\$$n</div>") if($n);
		print("<div id=\"fee\">\$".nearest(0.01, $total/3600*$n)."\n") if($n);
	}
}

sub invoice
{
	#TODO: implement. move files over and shit.
}

sub status
{
	(my $job)=@_;
	if($job) {
		my $duration=friendlyDuration(jobstatus($job));
		print("You have been working on $job for $duration\n");
	}
	else {
		print("You are not working on anything right now. Get to work!\n");
	}
}

sub jobstatus
{
	(my $job)=@_;
	my $jobfile=jobfile($job);
	if(-e $jobfile and `/usr/bin/tail -1 $jobfile`=~/^(\d+)\s*$/) {
		return time()-$1;
	}
	return 0;
}

sub jobfile
{
	return File::Spec->catdir($dir, shift());
}

sub current
{
	(my $job)=@_;
	if(defined $job) {
		open(my $fh, ">", $currentfile) or die("Error opening $currentfile");
		print $fh "$job\n";
		close($fh);
		return $job;
	}
	if(-e $currentfile) {
		open(my $fh, "<", $currentfile) or die("Error opening $currentfile");
		my $current=readline($fh);
		chomp($current);
		close($fh);
		return $current;
	}
	return 0;
}
sub duration
{
	(my $sec)=@_; 
	my $out="";
	my $hrs=sprintf("%02u",floor($sec/3600));
	my $min=sprintf("%02u",floor($sec/60)%60);
	$sec=sprintf("%02u",$sec%60);
	return "${hrs}:${min}:${sec}";
}
sub friendlyDuration
{
	(my $sec)=@_;
	my $day=floor($sec/86400);
	my $hrs=floor($sec/3600)%24;
	my $min=floor($sec/60)%60;
	$sec%=60;
	my $out="";
	$out=append($out, plural($day, "day"), ", ") if($day);
	$out=append($out, plural($hrs, "hour"), ", ") if($hrs);
	$out=append($out, plural($min, "minute"), ", ") if($min);
	$out=append($out, plural($sec, "second"), " and ") if($sec);
	return $out;
}
sub append
{
	(my $target, my $source, my $separator)=@_;
	if($target) {
		$target=$target.$separator;
	}
	$target.=$source;
	return $target;
}
sub plural
{
	(my $num, my $noun)=@_;
	my $s=$num==1?"":"s";
	return "$num $noun$s";
}
